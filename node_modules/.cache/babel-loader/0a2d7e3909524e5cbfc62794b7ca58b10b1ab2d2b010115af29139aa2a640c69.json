{"ast":null,"code":"var _jsxFileName = \"/Users/sharadpaudel/Documents/WEB DEVELOPMENT/REACT/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport QuizView from './components/QuizView';\nimport ScoreView from './components/ScoreView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const questions = [{\n    question: \"Total number of oceans in the World is\",\n    answers: [{\n      text: \"7\"\n    }, {\n      text: \"6\"\n    }, {\n      text: \"5\",\n      isCorrect: true\n    }]\n  }, {\n    question: \"Who is CEO of Tesla?\",\n    answers: [{\n      text: \"Jeff Bezos\"\n    }, {\n      text: \"Elon Musk\",\n      isCorrect: true\n    }, {\n      text: \"Bill Gates\"\n    }, {\n      text: \"Tony Stark\"\n    }]\n  }, {\n    question: \"Where is Statue of Liberty is located?\",\n    answers: [{\n      text: \"India\"\n    }, {\n      text: \"Russia\"\n    }, {\n      text: \"UK\"\n    }, {\n      text: \"USA\",\n      isCorrect: true\n    }]\n  }, {\n    question: \"What is the capital of Germany?\",\n    answers: [{\n      text: \"Paris\"\n    }, {\n      text: \"Berlin\",\n      isCorrect: true\n    }, {\n      text: \"London\"\n    }, {\n      text: \"Dublin\"\n    }]\n  }, {\n    question: \"Which one is the largest tropical rain forest in the world?\",\n    answers: [{\n      text: \"Amazon\",\n      isCorrect: true\n    }, {\n      text: \"Bosawas\"\n    }, {\n      text: \"Southeast Asian Rain Forest\"\n    }, {\n      text: \"Daintree Rain Forest\"\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [isQuizOver, setIsQuizOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const handleAnswerClick = isCorrect => {\n    // Check Score:: \n    if (isCorrect) setScore(score + 1);\n    const next = currentQuestion + 1;\n    if (next < questions.length) setCurrentQuestion(next);else setIsQuizOver(true);\n  };\n  const handleResetClick = () => {\n    setCurrentQuestion(0);\n    setIsQuizOver(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isQuizOver ? /*#__PURE__*/_jsxDEV(ScoreView, {\n      handleResetClick: handleResetClick,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(QuizView, {\n      questions: questions,\n      currentQuestion: currentQuestion,\n      handleAnswerClick: handleAnswerClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 86\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d5+WFpmKUtqCde3e345BBhWmfPc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","QuizView","ScoreView","jsxDEV","_jsxDEV","App","_s","questions","question","answers","text","isCorrect","currentQuestion","setCurrentQuestion","isQuizOver","setIsQuizOver","score","setScore","handleAnswerClick","next","length","handleResetClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sharadpaudel/Documents/WEB DEVELOPMENT/REACT/quiz-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport QuizView from './components/QuizView';\nimport ScoreView from './components/ScoreView';\nfunction App() {\n\n  const questions = [\n    {\n      question: \"Total number of oceans in the World is\",\n      answers: [{ text: \"7\" }, { text: \"6\" }, { text: \"5\", isCorrect: true }],\n    },\n    {\n      question: \"Who is CEO of Tesla?\",\n      answers: [\n        { text: \"Jeff Bezos\" },\n        { text: \"Elon Musk\", isCorrect: true },\n        { text: \"Bill Gates\" },\n        { text: \"Tony Stark\" },\n      ],\n    },\n    {\n      question: \"Where is Statue of Liberty is located?\",\n      answers: [\n        { text: \"India\" },\n        { text: \"Russia\" },\n        { text: \"UK\" },\n        { text: \"USA\", isCorrect: true },\n      ],\n    },\n    {\n      question: \"What is the capital of Germany?\",\n      answers: [\n        { text: \"Paris\" },\n        { text: \"Berlin\", isCorrect: true },\n        { text: \"London\" },\n        { text: \"Dublin\" },\n      ],\n    },\n    {\n      question: \"Which one is the largest tropical rain forest in the world?\",\n      answers: [\n        { text: \"Amazon\", isCorrect: true },\n        { text: \"Bosawas\" },\n        { text: \"Southeast Asian Rain Forest\" },\n        { text: \"Daintree Rain Forest\" },\n      ],\n    },\n  ]; \nconst [currentQuestion, setCurrentQuestion] = useState(0);\nconst[isQuizOver, setIsQuizOver]= useState(false);\nconst [score, setScore] = useState(0);\n\nconst handleAnswerClick= (isCorrect)=>{\n// Check Score:: \nif(isCorrect) setScore(score+1)\n\nconst next = currentQuestion+1;\nif(next<questions.length) setCurrentQuestion(next);\nelse setIsQuizOver(true);\n};\nconst handleResetClick= ()=>{\n  setCurrentQuestion(0);\n  setIsQuizOver(false);\n  setScore(0);\n\n}\n\n  return (\n    <div className=\"App\">\n    {isQuizOver ? <ScoreView handleResetClick= {handleResetClick} score= {score}/> : <QuizView \n    questions={questions} \n    currentQuestion={currentQuestion}\n    handleAnswerClick={handleAnswerClick}\n    /> }\n\n   \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}